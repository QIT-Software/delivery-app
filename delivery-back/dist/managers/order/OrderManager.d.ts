import IOrderManager from 'managers/order/IOrderManager';
import IOrderStore from 'database/stores/order/IOrderStore';
import Order from 'entities/Order';
import IUserStore from 'database/stores/user/IUserStore';
import { ID } from 'entities/Common';
import IAddressStore from 'database/stores/address/IAddressStore';
import AppType from 'entities/AppType';
import IPaymentStore from 'database/stores/payment/IPaymentStore';
import IBagStore from 'database/stores/bag/IBagStore';
import ICartStore from '../../database/stores/cart/ICartStore';
import ISetStore from '../../database/stores/set/ISetStore';
import IRestaurantStore from '../../database/stores/restaurant/IRestaurantStore';
import INotificationService from '../../services/notification/INotificationService';
import IAddressManager from 'managers/address/IAddressManager';
export default class OrderManager extends IOrderManager {
    private readonly orderStore;
    private readonly cartStore;
    private readonly restaurantStore;
    private readonly userStore;
    private readonly locationStore;
    private readonly setStore;
    private readonly paymentStore;
    private readonly notificationService;
    private readonly bagsStore;
    private readonly addressManager;
    constructor(orderStore: IOrderStore, cartStore: ICartStore, restaurantStore: IRestaurantStore, userStore: IUserStore, locationStore: IAddressStore, setStore: ISetStore, paymentStore: IPaymentStore, notificationService: INotificationService, bagsStore: IBagStore, addressManager: IAddressManager);
    getDeliveryPriceInCents(distanceMiles: number): number;
    createOrder(cartId: ID, userId: ID, setId: ID, clientAddress: {
        placeId: string | undefined;
        lat: number;
        lng: number;
        description: string;
        entrance: string | undefined;
        floor: string | undefined;
        apartment: string | undefined;
    }, restaurantId: string, numberOfDays: number): Promise<Order>;
    setOrderRestaurant(id: string, restaurantId: string, orderInfoId: string, priceCents: number): Promise<void>;
    getOrders(): Promise<Order[]>;
    getOrderById(id: string): Promise<Order>;
    acceptOrder(userId: string, orderId: string): Promise<void>;
    getOrdersByRestaurantId(userId: string): Promise<Order[]>;
    getOrdersByCartId(id: string): Promise<Order[]>;
    getOrdersByCourierId(userId: string): Promise<Order[]>;
    getOrdersByUserId(userId: string): Promise<Order[]>;
    getOrdersForDelivery(appType: AppType): Promise<Order[]>;
    getOrderHistory(userId: ID, appType: AppType): Promise<Order[]>;
    evaluateOrder(role: AppType, userId: string, orderId: string, rating: number): Promise<void>;
    markOrder(appType: AppType, orderId: string, bagId: string): Promise<void>;
    private checkOrderBag;
    deleteOrder(userId: ID, orderId: ID, appType: AppType): Promise<void>;
    getCurrentOrder(userId: string, appType: AppType): Promise<Order | undefined>;
    removeTheCurrentCourier(orderId: string): Promise<void>;
}
